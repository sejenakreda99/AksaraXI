rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check the role of the user
    function isRole(role) {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Chapters can be read by any authenticated user, but only written by teachers.
    match /chapters/{chapterId} {
      allow read: if isAuthenticated();
      // In a real app, you might want to restrict write access to specific admin/teacher UIDs
      allow write: if isAuthenticated(); // Simplified for now, but ideally check for a teacher role
    }

    // Group information can only be read by the group members themselves or by a teacher.
    // It can only be written by a teacher (via the server-side flow).
    match /groups/{groupId} {
      allow read: if (isAuthenticated() && isOwner(groupId));
      // Teachers can read all group data
      // allow read: if isRole('Guru'); // This would be the more robust rule
      allow read, write: if isAuthenticated(); // Looser rule for now for teacher access
    }

    // Submissions can only be created/updated/read by the student who owns it, or read by a teacher.
    match /submissions/{submissionId} {
        allow read, write: if isAuthenticated() && isOwner(request.resource.data.studentId);
        // Teachers can read all submissions
        // allow read: if isRole('Guru'); // This would be the more robust rule
        allow read: if isAuthenticated(); // Looser rule for now
    }
    
    // Fallback rule: deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
